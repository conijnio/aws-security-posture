{
  "StartAt": "CollectFindings",
  "States": {
    "CollectFindings": {
      "Type": "Task",
      "Resource": "${CollectFindingsFunction}",
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 1
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.ExceedToleratedFailureThreshold",
            "States.Permissions"
          ],
          "Next": "FailState"
        }
      ],
      "Next": "AggregationRequired"
    },
    "AggregationRequired": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.FindingCount",
          "NumericGreaterThanEquals": 100,
          "Next": "AggregateFindings"
        }
      ],
      "Default": "HasNextToken"
    },
    "AggregateFindings": {
      "Type": "Task",
      "Resource": "${AggregateFindingsFunction}",
      "Catch": [
        {
          "ErrorEquals": [
            "States.Permissions"
          ],
          "Next": "FailState"
        }
      ],
      "Next": "HasNextToken"
    },
    "HasNextToken": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.NextToken",
          "StringEquals": "",
          "Next": "SplitPerAccount"
        }
      ],
      "Default": "CollectFindings"
    },
    "SplitPerAccount": {
      "Type": "Task",
      "Resource": "${SplitPerAccountFunction}",
      "Catch": [
        {
          "ErrorEquals": [
            "States.Permissions"
          ],
          "Next": "FailState"
        }
      ],
      "Next": "IsConformancePack"
    },
    "IsConformancePack": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.ConformancePack",
          "StringEquals": "",
          "Next": "CalculateAccountScores"
        }
      ],
      "Default": "FetchAccountMapping"
    },
    "FetchAccountMapping": {
      "Type": "Task",
      "Resource": "${FetchAccountMappingFunction}",
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 1
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.ExceedToleratedFailureThreshold",
            "States.Permissions"
          ],
          "Next": "FailState"
        }
      ],
      "Next": "ConformancePack"
    },
    "ConformancePack": {
      "Type": "Task",
      "Resource": "${ConformancePackFunction}",
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 1
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.DataLimitExceeded",
            "States.ExceedToleratedFailureThreshold",
            "States.Permissions"
          ],
          "Next": "FailState"
        }
      ],
      "Next": "CalculateAccountScores"
    },
    "CalculateAccountScores": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "WorkloadContext",
        "States": {
          "WorkloadContext": {
            "Type": "Task",
            "Resource": "${WorkloadContextFunction}",
            "Next": "CalculateScore"
          },
          "CalculateScore": {
            "Type": "Task",
            "Resource": "${CalculateScoreFunction}",
            "End": true
          }
        }
      },
      "ResultPath": "$.Accounts",
      "ItemsPath": "$.Accounts",
      "Catch": [
        {
          "ErrorEquals": [
            "States.Permissions"
          ],
          "Next": "FailState"
        }
      ],
      "Next": "PublishMetrics"
    },
    "PublishMetrics": {
      "Type": "Task",
      "Resource": "${PublishMetricsFunction}",
      "Catch": [
        {
          "ErrorEquals": [
            "States.Permissions"
          ],
          "Next": "FailState"
        }
      ],
      "End": true
    },
    "FailState": {
      "Type": "Fail",
      "CausePath": "$.Cause",
      "ErrorPath": "$.Error"
    }
  }
}