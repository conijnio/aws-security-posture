AWSTemplateFormatVersion: 2010-09-09
Transform:
  - AWS::Serverless-2016-10-31
  - AWS::LanguageExtensions
Description: SecurityPosture
Parameters:

  Prefix:
    Description: Common prefix applied to all resources
    Type: String
    Default: aws-security-posture

  CollectInterval:
    Description: The interval that is used to collect the findings
    Type: String
    Default: 12 hours
    AllowedValues:
      - 5 minutes
      - 1 hour
      - 3 hours
      - 6 hours
      - 12 hours
      - 1 day

  ConformancePack:
    Description: The name of the conformance pack.
    Type: String
    Default: ""

  RetentionInDays:
    Description: The number of days that the logs should be retained
    Type: String
    Default: 7

  PlatformAccounts:
    Description: Platform accounts that do not have the environment as a postfix but due contain a dash in the name. For example prefix-log-archive, this will break the logic.
    Type: AWS::SSM::Parameter::Value<String>
    Default: /landingzone/security-posture/platform-accounts

  LoggingBucket:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /landing-zone/logging/S3AccessLoggingBucket

  NotificationsArn:
    Description: The SNS topic ARN used to configure the alarms.
    Type: String
    Default: ""

  PermissionBoundaryArn:
    Description: The ARN of the permissions boundary that will be applied to the IAM Roles.
    Type: String
    Default: ""

#  OrganizationId:
#    Type: AWS::SSM::Parameter::Value<String>
#    Default: /landingzone/generic/organization-id

Conditions:
  hasNotificationsArn: !Not
    - !Equals
      - !Ref NotificationsArn
      - ""

  hasPermissionBoundaryArn: !Not
    - !Equals
      - !Ref PermissionBoundaryArn
      - ""

  hasConformancePack: !Not
    - !Equals
      - !Ref ConformancePack
      - ""

Resources:

  FindingsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${Prefix}-${AWS::Region}
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        TargetObjectKeyFormat:
          PartitionedPrefix:
            PartitionDateSource: EventTime
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref KmsKey
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      LifecycleConfiguration:
        Rules:
          - Id: ExpirationPolicy_ID
            Status: Enabled
            ExpirationInDays: 14
            NoncurrentVersionExpirationInDays: 1
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1

  FindingsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FindingsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowSSLRequestsOnly
            Action: s3:*
            Effect: Deny
            Resource:
              - !Sub ${FindingsBucket.Arn}
              - !Sub ${FindingsBucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: "false"
            Principal: "*"

  StatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Prefix}-states-execution-${AWS::Region}
      PermissionsBoundary: !If [hasPermissionBoundaryArn, !Ref PermissionBoundaryArn, !Ref AWS::NoValue]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        # See: https://docs.aws.amazon.com/step-functions/latest/dg/cw-logs.html
        - PolicyName: EnableLogging
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:GetLogDelivery
                  - logs:DescribeLogGroups
                  - logs:PutResourcePolicy
                  - logs:DeleteResourcePolicy
                  - logs:DescribeResourcePolicies
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt StateMachineLogGroup.Arn
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt AggregateFindingsFunction.Arn
                  - !GetAtt CalculateScoreFunction.Arn
                  - !GetAtt CollectFindingsFunction.Arn
                  - !GetAtt ConformancePackFunction.Arn
                  - !GetAtt CustomRulesFunction.Arn
                  - !GetAtt FetchAccountMappingFunction.Arn
                  - !GetAtt PublishMetricsFunction.Arn
                  - !GetAtt SplitPerAccountFunction.Arn
                  - !GetAtt SubscriptionFunction.Arn
                  - !GetAtt WorkloadContextFunction.Arn

  StateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${Prefix}-state-machine
      KmsKeyId: !GetAtt KmsKey.Arn
      RetentionInDays: !Ref RetentionInDays

  StateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub ${Prefix}-security-score
      DefinitionUri: state_machine.asl.json
      Role: !GetAtt StatesExecutionRole.Arn
      Tracing:
        Enabled: true
      Logging:
        Level: ERROR
        IncludeExecutionData: false
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StateMachineLogGroup.Arn
      Events:
        AWSBestPractices:
          Type: ScheduleV2
          Properties:
            Name: AWSBestPractices
            Description: Collect findings using the specified rate.
            PermissionsBoundary: !If [hasPermissionBoundaryArn, !Ref PermissionBoundaryArn, !Ref AWS::NoValue]
            State: ENABLED
            ScheduleExpression: !Sub rate(${CollectInterval})
            ScheduleExpressionTimezone: Europe/Amsterdam
            Input:
              Fn::ToJsonString:
                Bucket: !Ref FindingsBucket
                Report: aws-foundational-security-best-practices-v1.0.0
                SubscriptionArn: !Sub arn:aws:securityhub:${AWS::Region}:${AWS::AccountId}:subscription/aws-foundational-security-best-practices/v/1.0.0
                Filter:
                  GeneratorId:
                    - Comparison: PREFIX
                      Value: aws-foundational-security-best-practices/v/1.0.0
                  RecordState:
                    - Comparison: EQUALS
                      Value: ACTIVE
                  WorkflowStatus:
                    - Comparison: EQUALS
                      Value: NEW
                    - Comparison: EQUALS
                      Value: NOTIFIED
        CISFoundationsBenchmark:
          Type: ScheduleV2
          Properties:
            Name: CISFoundationsBenchmark
            Description: Collect findings using the specified rate.
            PermissionsBoundary: !If [hasPermissionBoundaryArn, !Ref PermissionBoundaryArn, !Ref AWS::NoValue]
            State: ENABLED
            ScheduleExpression: !Sub rate(${CollectInterval})
            ScheduleExpressionTimezone: Europe/Amsterdam
            Input:
              Fn::ToJsonString:
                Bucket: !Ref FindingsBucket
                Report: cis-aws-foundations-benchmark-v1.2.0
                SubscriptionArn: !Sub arn:aws:securityhub:${AWS::Region}:${AWS::AccountId}:subscription/cis-aws-foundations-benchmark/v/1.2.0
                Filter:
                  GeneratorId:
                    - Comparison: PREFIX
                      Value: arn:aws:securityhub:::ruleset/cis-aws-foundations-benchmark/v/1.2.0
                  RecordState:
                    - Comparison: EQUALS
                      Value: ACTIVE
                  WorkflowStatus:
                    - Comparison: EQUALS
                      Value: NEW
                    - Comparison: EQUALS
                      Value: NOTIFIED
      DefinitionSubstitutions:
        AggregateFindingsFunction: !GetAtt AggregateFindingsFunction.Arn
        CalculateScoreFunction: !GetAtt CalculateScoreFunction.Arn
        CollectFindingsFunction: !GetAtt CollectFindingsFunction.Arn
        ConformancePackFunction: !GetAtt ConformancePackFunction.Arn
        CustomRulesFunction: !GetAtt CustomRulesFunction.Arn
        FetchAccountMappingFunction: !GetAtt FetchAccountMappingFunction.Arn
        PublishMetricsFunction: !GetAtt PublishMetricsFunction.Arn
        SplitPerAccountFunction: !GetAtt SplitPerAccountFunction.Arn
        SubscriptionFunction: !GetAtt SubscriptionFunction.Arn
        WorkloadContextFunction: !GetAtt WorkloadContextFunction.Arn

  StateMachineConformancePack:
    Condition: hasConformancePack
    Type: AWS::Scheduler::Schedule
    Properties:
      ScheduleExpression: !Sub rate(${CollectInterval})
      FlexibleTimeWindow:
        Mode: 'OFF'
      Name: !Ref ConformancePack
      State: ENABLED
      Description: Collect controls from the conformance pack, to perform accurate calculations
      ScheduleExpressionTimezone: Europe/Amsterdam
      Target:
        Arn: !Ref StateMachine
        RoleArn: !GetAtt StateMachineConformancePackRole.Arn
        Input:
          Fn::ToJsonString:
            Bucket: !Ref FindingsBucket
            Report: lz-standard
            ConformancePack: !Ref ConformancePack
            Filter:
              Title:
                - Comparison: PREFIX
                  Value: lz-
              RecordState:
                - Comparison: EQUALS
                  Value: ACTIVE
              WorkflowStatus:
                - Comparison: EQUALS
                  Value: NEW
                - Comparison: EQUALS
                  Value: NOTIFIED

  StateMachineConformancePackRole:
    Condition: hasConformancePack
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !If [ hasPermissionBoundaryArn, !Ref PermissionBoundaryArn, !Ref AWS::NoValue ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - scheduler.amazonaws.com
      Policies:
        - PolicyName: StateMachineAWSBestPracticesStartExecutionPolicy
          PolicyDocument:
            Statement:
              - Action: states:StartExecution
                Effect: Allow
                Resource: !Ref StateMachine

  StateMachineExecutionsFailedAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub ${Prefix}-security-score-failed-executions
      AlarmDescription: Notify the platform team when an execution of the security posture has failed, this impacts the dashboards in the observability platform.
      AlarmActions:
        - !If [hasNotificationsArn, !Ref NotificationsArn, !Ref AWS::NoValue]
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: ExecutionsFailed
      Namespace: AWS/States
      Statistic: Maximum
      Threshold: 1
      DatapointsToAlarm: 1
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref StateMachine
      Period: 60
      TreatMissingData: notBreaching

  StateMachineExecutionsTimedOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub ${Prefix}-security-score-executions-timed-out
      AlarmDescription: Notify the platform team when an execution of the security posture has been timed out, this impacts the dashboards in the observability platform.
      AlarmActions:
        - !If [hasNotificationsArn, !Ref NotificationsArn, !Ref AWS::NoValue]
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: ExecutionsTimedOut
      Namespace: AWS/States
      Statistic: Maximum
      Threshold: 1
      DatapointsToAlarm: 1
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref StateMachine
      Period: 60
      TreatMissingData: notBreaching

  StateMachineExecutionThrottledAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub ${Prefix}-security-score-executions-throttled
      AlarmDescription: Notify the platform team when an execution of the security posture has been throttled, this impacts the dashboards in the observability platform.
      AlarmActions:
        - !If [hasNotificationsArn, !Ref NotificationsArn, !Ref AWS::NoValue]
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: ExecutionThrottled
      Namespace: AWS/States
      Statistic: Maximum
      Threshold: 1
      DatapointsToAlarm: 1
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref StateMachine
      Period: 60
      TreatMissingData: notBreaching

  StateMachineExecutionTimeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub ${Prefix}-security-score-execution-time
      AlarmDescription: Notify the platform team when an execution of the security posture has exceeded the threshold. This could indicate a potential problem in the future.
      AlarmActions:
        - !If [hasNotificationsArn, !Ref NotificationsArn, !Ref AWS::NoValue]
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: ExecutionTime
      Namespace: AWS/States
      Statistic: Maximum
      Threshold: 1800000 # 1,800,000ms is 30 minutes
      DatapointsToAlarm: 1
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref StateMachine
      Period: 60
      TreatMissingData: notBreaching

  ####################
  # Aggregate Findings
  ####################

  AggregateFindingsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      PermissionsBoundary: !If [hasPermissionBoundaryArn, !Ref PermissionBoundaryArn, !Ref AWS::NoValue]
      FunctionName: !Sub ${Prefix}-aggregate-findings
      Architectures: [arm64]
      Runtime: provided.al2
      CodeUri: ./lambdas/aggregate-findings
      Handler: bootstrap
      Timeout: 300  # 5 Minutes, collect current findings and merge them
      MemorySize: 1024

  AggregateFindingsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref AggregateFindingsFunctionRole
      PolicyName: !Sub ${Prefix}-aggregate-findings
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
            Resource: !Sub ${FindingsBucket.Arn}/*
          - Effect: Allow
            Action: securityhub:GetFindings
            Resource: !Sub arn:aws:securityhub:*:${AWS::AccountId}:hub/default

  AggregateFindingsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AggregateFindingsFunction}
      KmsKeyId: !GetAtt KmsKey.Arn
      RetentionInDays: !Ref RetentionInDays

  #################
  # Calculate Score
  #################

  CalculateScoreFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      PermissionsBoundary: !If [hasPermissionBoundaryArn, !Ref PermissionBoundaryArn, !Ref AWS::NoValue]
      FunctionName: !Sub ${Prefix}-calculate-score
      Architectures: [arm64]
      Runtime: provided.al2
      CodeUri: ./lambdas/calculate-score
      Handler: bootstrap
      Timeout: 60  # 1 Minute, this function gets a specific per account payload.
      MemorySize: 2048

  CalculateScorePolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref CalculateScoreFunctionRole
      PolicyName: !Sub ${Prefix}-read-access-findings-bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: s3:GetObject
            Resource: !Sub ${FindingsBucket.Arn}/*

  CalculateScoreLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${CalculateScoreFunction}
      KmsKeyId: !GetAtt KmsKey.Arn
      RetentionInDays: !Ref RetentionInDays

  ##################
  # Collect Findings
  ##################

  CollectFindingsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      PermissionsBoundary: !If [hasPermissionBoundaryArn, !Ref PermissionBoundaryArn, !Ref AWS::NoValue]
      FunctionName: !Sub ${Prefix}-collect-findings
      Architectures: [arm64]
      Runtime: provided.al2
      CodeUri: ./lambdas/collect-findings
      Handler: bootstrap
      Timeout: 60  # 1 Minute, we only fetch 100 records per invocation
      MemorySize: 8192

  CollectFindingsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref CollectFindingsFunctionRole
      PolicyName: !Sub ${Prefix}-collect-findings
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: s3:PutObject
            Resource: !Sub ${FindingsBucket.Arn}/*
          - Effect: Allow
            Action: securityhub:GetFindings
            Resource: !Sub arn:aws:securityhub:*:${AWS::AccountId}:hub/default

  CollectFindingsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${CollectFindingsFunction}
      KmsKeyId: !GetAtt KmsKey.Arn
      RetentionInDays: !Ref RetentionInDays

  ##################
  # Conformance Pack
  ##################

  ConformancePackFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      PermissionsBoundary: !If [hasPermissionBoundaryArn, !Ref PermissionBoundaryArn, !Ref AWS::NoValue]
      FunctionName: !Sub ${Prefix}-conformance-pack
      Architectures: [arm64]
      Runtime: provided.al2
      CodeUri: ./lambdas/conformance-pack
      Handler: bootstrap
      Timeout: 120
      MemorySize: 8192

  ConformancePackPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref ConformancePackFunctionRole
      PolicyName: !Sub ${Prefix}-conformance-packs
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: config:GetConformancePackComplianceDetails
            Resource: "*" #!Sub arn:aws:config:${AWS::Region}:${AWS::AccountId}:conformance-pack/${ConformancePack}/*
          - Effect: Allow
            Action: s3:PutObject
            Resource: !Sub ${FindingsBucket.Arn}/*

  ConformancePackLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ConformancePackFunction}
      KmsKeyId: !GetAtt KmsKey.Arn
      RetentionInDays: !Ref RetentionInDays

  ##############
  # Custom Rules
  ##############

  CustomRulesLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Prefix}-custom-rules
      KmsKeyId: !GetAtt KmsKey.Arn
      RetentionInDays: !Ref RetentionInDays

  CustomRulesFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      PermissionsBoundary: !If [ hasPermissionBoundaryArn, !Ref PermissionBoundaryArn, !Ref AWS::NoValue ]
      FunctionName: !Sub ${Prefix}-custom-rules
      LoggingConfig:
        SystemLogLevel: DEBUG
        ApplicationLogLevel: TRACE
        LogGroup: !Ref CustomRulesLogGroup
        LogFormat: JSON
      Architectures: [ arm64 ]
      Runtime: provided.al2
      CodeUri: ./lambdas/custom-rules
      Handler: bootstrap
      Timeout: 60  # 1 Minute, we are only fetching the account name.
      MemorySize: 128
      Environment:
        Variables:
          PLATFORM_ACCOUNTS: !Ref PlatformAccounts

  CustomRulesPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref CustomRulesFunctionRole
      PolicyName: !Sub ${Prefix}-custom-rules
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: s3:PutObject
            Resource: !Sub ${FindingsBucket.Arn}/*

  #######################
  # Fetch Account Mapping
  #######################

  FetchAccountMappingFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      PermissionsBoundary: !If [hasPermissionBoundaryArn, !Ref PermissionBoundaryArn, !Ref AWS::NoValue]
      FunctionName: !Sub ${Prefix}-fetch-account-mapping
      Architectures: [arm64]
      Runtime: provided.al2
      CodeUri: ./lambdas/fetch-account-mapping
      Handler: bootstrap
      Timeout: 120
      MemorySize: 8192

  FetchAccountMappingPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref FetchAccountMappingFunctionRole
      PolicyName: !Sub ${Prefix}-conformance-packs
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: organizations:ListAccounts
            Resource: "*"

  FetchAccountMappingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${FetchAccountMappingFunction}
      KmsKeyId: !GetAtt KmsKey.Arn
      RetentionInDays: !Ref RetentionInDays

  #################
  # Publish Metrics
  #################

  PublishMetricsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      PermissionsBoundary: !If [hasPermissionBoundaryArn, !Ref PermissionBoundaryArn, !Ref AWS::NoValue]
      FunctionName: !Sub ${Prefix}-publish-metrics
      Architectures: [ arm64 ]
      Runtime: provided.al2
      CodeUri: ./lambdas/publish-metrics
      Handler: bootstrap
      Timeout: 60  # 1 Minute, we publish all metrics one by one for now
      MemorySize: 2048

  PublishMetricsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref PublishMetricsFunctionRole
      PolicyName: !Sub ${Prefix}-publish-metrics
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: cloudwatch:PutMetricData
            Resource: "*"

  PublishMetricsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${PublishMetricsFunction}
      KmsKeyId: !GetAtt KmsKey.Arn
      RetentionInDays: !Ref RetentionInDays

  ###################
  # Split Per Account
  ###################

  SplitPerAccountFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      PermissionsBoundary: !If [hasPermissionBoundaryArn, !Ref PermissionBoundaryArn, !Ref AWS::NoValue]
      FunctionName: !Sub ${Prefix}-split-per-account
      Architectures: [arm64]
      Runtime: provided.al2
      CodeUri: ./lambdas/split-per-account
      Handler: bootstrap
      Timeout: 900  # 15 Minutes, this will process all files stored on S3 by the CollectFindings action.
      MemorySize: 8192

  SplitPerAccountPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref SplitPerAccountFunctionRole
      PolicyName: !Sub ${Prefix}-split-per-account
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
            Resource: !Sub ${FindingsBucket.Arn}/*

  SplitPerAccountLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SplitPerAccountFunction}
      KmsKeyId: !GetAtt KmsKey.Arn
      RetentionInDays: !Ref RetentionInDays

  ##############
  # Subscription
  ##############

  SubscriptionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Prefix}-subscription
      KmsKeyId: !GetAtt KmsKey.Arn
      RetentionInDays: !Ref RetentionInDays

  SubscriptionFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      PermissionsBoundary: !If [hasPermissionBoundaryArn, !Ref PermissionBoundaryArn, !Ref AWS::NoValue]
      FunctionName: !Sub ${Prefix}-subscription
      LoggingConfig:
        SystemLogLevel: DEBUG
        ApplicationLogLevel: TRACE
        LogGroup: !Ref SubscriptionLogGroup
        LogFormat: JSON
      Architectures: [ arm64 ]
      Runtime: provided.al2
      CodeUri: ./lambdas/subscription
      Handler: bootstrap
      Timeout: 60  # 1 Minute, we are only fetching the account name.
      MemorySize: 128
      Environment:
        Variables:
          PLATFORM_ACCOUNTS: !Ref PlatformAccounts

  SubscriptionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref SubscriptionFunctionRole
      PolicyName: !Sub ${Prefix}-subscription
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: securityhub:DescribeStandardsControls
            Resource: !Sub arn:aws:securityhub:${AWS::Region}:${AWS::AccountId}:hub/default
          - Effect: Allow
            Action: s3:PutObject
            Resource: !Sub ${FindingsBucket.Arn}/*

  ##################
  # Workload Context
  ##################

  WorkloadContextFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      PermissionsBoundary: !If [hasPermissionBoundaryArn, !Ref PermissionBoundaryArn, !Ref AWS::NoValue]
      FunctionName: !Sub ${Prefix}-workload-context
      Architectures: [ arm64 ]
      Runtime: provided.al2
      CodeUri: ./lambdas/workload-context
      Handler: bootstrap
      Timeout: 60  # 1 Minute, we are only fetching the account name.
      MemorySize: 128
      Environment:
        Variables:
          PLATFORM_ACCOUNTS: !Ref PlatformAccounts

  WorkloadContextPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref WorkloadContextFunctionRole
      PolicyName: !Sub ${Prefix}-read-access-findings-bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: organizations:DescribeAccount
            Resource: "*"
  WorkloadContextLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${WorkloadContextFunction}
      KmsKeyId: !GetAtt KmsKey.Arn
      RetentionInDays: !Ref RetentionInDays

  #########
  # KMS Key
  #########

  KmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Secrets Manager encryption Key for gitlab mirror user credentials store secret
      EnableKeyRotation: true
      Enabled: true
      KeyPolicy:
        Id: key-policy
        Version: '2012-10-17'
        Statement:
          - Sid: Allow IAM access
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:Describe*
              - kms:List*
              - kms:Get*
            Resource: "*"
          - Sid: Allow administration of the key - DO NOT DELETE OR UPDATE
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
              - kms:TagResource
              - kms:UntagResource
            Resource: "*"
            Condition:
              ArnLike:
                aws:PrincipalArn: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-reserved/sso.amazonaws.com/*/AWSReservedSSO_PlatformDeveloper_*
          - Sid: Allow access for Key Administrator
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:TagResource
              - kms:UntagResource
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: "*"
            Condition:
              ArnLike:
                aws:PrincipalArn:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/cloudformation-execution-role
          - Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Effect: Allow
            Principal:
              AWS: "*"
            Resource: "*"
            Condition:
              StringEquals:
                kms:CallerAccount: !Ref AWS::AccountId
                kms:ViaService:
                  - !Sub s3.${AWS::Region}.amazonaws.com
          - Sid: Allow access for Logs Service Principal
            Effect: Allow
            Principal:
              Service: !Sub logs.${AWS::Region}.amazonaws.com
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Resource: "*"
            Condition:
              ArnLike:
                kms:EncryptionContext:aws:logs:arn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*:*
  KmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${Prefix}
      TargetKeyId: !Ref KmsKey
